---
import type { Props } from '@astrojs/starlight/props';
import Icon from '../../../node_modules/@astrojs/starlight/user-components/Icon.astro';


import { pwaInfo } from "virtual:pwa-info";
---
<link rel="icon" href="/favicon.svg" />

 {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}


  <script   >
// From a page:
import { registerSW } from 'virtual:pwa-register';

if ('serviceWorker' in navigator) {
  registerSW({
  immediate: true,
  onRegisteredSW(swScriptUrl) {
    console.log("SW registered: ", swScriptUrl);
  },
  onOfflineReady() {
    console.log("PWA application ready to work offline");
   
  },
});

}



// navigator.serviceWorker.addEventListener('message', async event => {
//   // Optional: ensure the message came from workbox-broadcast-update
//   if (event.data.meta === 'workbox-broadcast-update') {
//     const {cacheName, updatedURL} = event.data.payload;

//     // Do something with cacheName and updatedURL.
//     // For example, get the cached content and update
//     // the content on the page.
//     const cache = await caches.open(cacheName);
//     const updatedResponse = await cache.match(updatedURL);
//     const updatedText = await updatedResponse?.text();
//   }
// });
  </script>


<script is:inline type="module">
    await import('/pagefind/pagefind-highlight.js');
    new PagefindHighlight({ highlightParam: "highlight" ,addStyles: false ,markOptions:{
		className: "pagefind-highlight",
		exclude: ["[data-pagefind-ignore]", "[data-pagefind-ignore] *"],
		accuracy: { "value": "complementary",
        "limiters": [",","",".",":","`","'",'"',";","ÿõ","[","]","Ÿë","Ÿé","Ÿã","Ÿè","Ÿå","‚Äò","ŸÄ","Ÿê","Ÿç","Ÿí","‚Äô"]
    },
    acrossElements: true,
    synonyms: {
      "ÿß": "ÿ£",
      "ÿ°": "ÿ£",
      "ÿ¶": "ÿ£",
      "ÿ§": "ÿ£",
      "ÿ¢": "ÿ£",
      "Ÿâ": "ÿ£",
    }
	}});
</script>



{/* This is intentionally inlined to avoid FOUC. */}
<script is:inline>
	  const c_sl_color_accent_low = localStorage.getItem('--c-sl-color-accent-low');
	  const c_sl_color_accent = localStorage.getItem('--c-sl-color-accent');
	  const c_sl_color_accent_high = localStorage.getItem('--c-sl-color-accent-high');
	  const c_sl_color_white = localStorage.getItem('--c-sl-color-white');
	  const c_sl_color_gray_1 = localStorage.getItem('--c-sl-color-gray-1');
	  const c_sl_color_gray_2 = localStorage.getItem('--c-sl-color-gray-2');
	  const c_sl_color_gray_3 = localStorage.getItem('--c-sl-color-gray-3');
	  const c_sl_color_gray_4 = localStorage.getItem('--c-sl-color-gray-4');
	  const c_sl_color_gray_5 = localStorage.getItem('--c-sl-color-gray-5');
	  const c_sl_color_gray_6 = localStorage.getItem('--c-sl-color-gray-6');
	  const c_sl_color_gray_7 = localStorage.getItem('--c-sl-color-gray-7');
	  const c_sl_color_black = localStorage.getItem('--c-sl-color-black');

    const sl_text_h1 = localStorage.getItem('--sl-text-h1');
    const sl_text_h2 = localStorage.getItem('--sl-text-h2');
    const sl_text_h3 = localStorage.getItem('--sl-text-h3');
    const sl_text_h4 = localStorage.getItem('--sl-text-h4');
    const sl_text_h5 = localStorage.getItem('--sl-text-h5');
    const sl_text_main = localStorage.getItem('--sl-text-main');


if (c_sl_color_accent_low !== null) {
  document.documentElement.style.setProperty('--c-sl-color-accent-low', c_sl_color_accent_low);
}
if (c_sl_color_accent !== null) {
  document.documentElement.style.setProperty('--c-sl-color-accent', c_sl_color_accent);
}
if (c_sl_color_accent_high !== null) {
  document.documentElement.style.setProperty('--c-sl-color-accent-high', c_sl_color_accent_high);
}
if (c_sl_color_white !== null) {
  document.documentElement.style.setProperty('--c-sl-color-white', c_sl_color_white);
}
if (c_sl_color_gray_1 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-1', c_sl_color_gray_1);
}
if (c_sl_color_gray_2 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-2', c_sl_color_gray_2);
}
if (c_sl_color_gray_3 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-3', c_sl_color_gray_3);
}
if (c_sl_color_gray_4 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-4', c_sl_color_gray_4);
}
if (c_sl_color_gray_5 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-5', c_sl_color_gray_5);
}
if (c_sl_color_gray_6 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-6', c_sl_color_gray_6);
}
if (c_sl_color_gray_7 !== null) {
  document.documentElement.style.setProperty('--c-sl-color-gray-7', c_sl_color_gray_7);
}
if (c_sl_color_black !== null) {
  document.documentElement.style.setProperty('--c-sl-color-black', c_sl_color_black);
}

if (sl_text_h1 !== null) {
  document.documentElement.style.setProperty('--sl-text-h1', sl_text_h1);
}
if (sl_text_h2 !== null) {
  document.documentElement.style.setProperty('--sl-text-h2', sl_text_h2);
}
if (sl_text_h3 !== null) {
  document.documentElement.style.setProperty('--sl-text-h3', sl_text_h3);
}
if (sl_text_h4 !== null) {
  document.documentElement.style.setProperty('--sl-text-h4', sl_text_h4);
}
if (sl_text_h5 !== null) {
  document.documentElement.style.setProperty('--sl-text-h5', sl_text_h5);
}
if (sl_text_main !== null) {
  document.documentElement.style.setProperty('--sl-text-main', sl_text_main);
}

	// ‚òùÔ∏è This script prevent the FART effect.
	if (localStorage.getItem("theme") === null) {
	  document.documentElement.setAttribute("data-theme", "dark");
	} else
	  document.documentElement.setAttribute(
		"data-theme",
		localStorage.getItem("theme")
	  );
	// "theme" LocalStorage value is set by the package to remember user preference.
	// The value is checked and applyed before rendering anything.
  </script>
  <script>
	import { themeChange } from 'theme-change';
	themeChange();
	// üëÜ you could import the CDN directly instead of these two lines
  </script>


<template id="theme-icons">
	<Icon name="sun" class="light" />
	<Icon name="moon" class="dark" />
	<Icon name="laptop" class="auto" />
</template>
